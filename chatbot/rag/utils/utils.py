# ./chatbot/rag/utils.py

import os
import re
import csv
import json
import logging
from datetime import datetime
from langchain_community.document_loaders import PyPDFDirectoryLoader
from langchain_text_splitters.character import RecursiveCharacterTextSplitter
from langchain_community.retrievers import TFIDFRetriever

logger = logging.getLogger(__name__)

def load_config(config_path: str) -> dict:
    """
    Loads the configuration from a JSON file.

    Args:
        config_path (str): The path to the configuration file.

    Returns:
        dict: A dictionary containing the loaded configuration.
    """
    with open(config_path, 'r') as config_file:
        logger.info("Configuración 'config' cargada correctamente.")
        return json.load(config_file)

def load_documents_database(directory: str, chunk_size: int, chunk_overlap: int) -> TFIDFRetriever:
    """
    Loads and prepares the document database for retrieval.

    Args:
        directory (str): The path to the directory containing the PDF documents.
        chunk_size (int): The size of chunks when splitting documents.
        chunk_overlap (int): The overlap size between chunks of documents.

    Returns:
        TFIDFRetriever: A TFIDFRetriever object for document retrieval.
    """
    docs = PyPDFDirectoryLoader(directory).load()
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=chunk_size,
        chunk_overlap=chunk_overlap
    )
    
    logger.info('Documentos PDF cargados correctamente.')
    
    return TFIDFRetriever.from_documents(text_splitter.split_documents(docs))



def clean_markdown_message(message: str) -> str:
    """
    Cleans a markdown message by removing markdown syntax, emojis,
    and extra spaces, leaving only the visible plain text.

    Args:
        message (str): The original markdown message.

    Returns:
        str: The cleaned message without markdown syntax, emojis, or extra spaces.
    """
    message = re.sub(r'\*\*(.*?)\*\*', r'\1', message)
    message = re.sub(r'#+', '', message)
    message = re.sub(r'[^\w\s,.:!?]', '', message)
    message = re.sub(r'\n+', ' ', message)
    message = re.sub(r'\s+', ' ', message).strip()
    
    return message

def log_message_interaction(token: str, user_message: str, response: str):
    """
    Logs the token, current time, user message, and bot response into a CSV file.

    Args:
        token (str): The CSRF token associated with the interaction.
        user_message (str): The message sent by the user.
        response (str): The response generated by the bot.
    """
    file_path = './chatbot/rag/database/log_message_interaction.csv'
    current_time = datetime.now().strftime('%Y%m%d%H%M%S')
    
    try:
        with open(file_path, mode='a', newline='') as file:
            writer = csv.writer(file)
            if not os.path.exists(file_path):
                writer.writerow(['Token', 'Time', 'User Message', 'Response'])
            writer.writerow([token,current_time,user_message,clean_markdown_message(response)])
        
        logger.info(f"Registro guardado")
    except Exception as e:
        logger.error(f"Error al guardar la interacción en {file_path}: {e}")
